#
# Copyright (c) 2019-2020 P3TERX <https://p3terx.com>
#
# This is free software, licensed under the MIT License.
# See /LICENSE for more information.
#
# https://github.com/P3TERX/Actions-OpenWrt
# Description: Build OpenWrt using GitHub Actions
#

name: Build OpenWrt

on:
  repository_dispatch:
  workflow_dispatch:
    inputs:
      ssh:
        description: 'SSH connection to Actions'
        required: false
        default: 'false'

env:
  REPO_URL: https://git.openwrt.org/openwrt/openwrt.git
  REPO_BRANCH: master
  TARGET_DEVICES: xiaomi_ax3600
  FEEDS_CONF: feeds.conf.default
  CONFIG_FILE: AX3600.config
  DIY_P1_SH: diy-part1.sh
  DIY_P2_SH: diy-part2.sh
  UPLOAD_BIN_DIR: false
  UPLOAD_FIRMWARE: true
  UPLOAD_RELEASE: true
  TZ: Europe/Stockholm

jobs:
  build:
    runs-on: ubuntu-20.04

    steps:
    - name: Checkout
      uses: actions/checkout@main

    - name: Initialization environment
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        sudo rm -rf /etc/apt/sources.list.d/* /usr/share/dotnet /usr/local/lib/android /opt/ghc
        sudo -E apt-get -qq update
        sudo -E apt-get -qq install $(curl -fsSL git.io/depends-ubuntu-2004)
        sudo -E apt-get -qq autoremove --purge
        sudo -E apt-get -qq clean
        sudo timedatectl set-timezone "$TZ"
        sudo mkdir -p /workdir
        sudo chown $USER:$GROUPS /workdir
    - name: Clone source code
      working-directory: /workdir
      run: |
        df -hT $PWD
        git clone --depth 1 $REPO_URL -b $REPO_BRANCH openwrt
        ln -sf /workdir/openwrt $GITHUB_WORKSPACE/openwrt
        cd openwrt
        useVersionInfo=$(git show -s --date=short --format="Author: %an<br/>date: %cd<br/>commit: %s<br/>commit hash: %H")
        echo "useVersionInfo=$useVersionInfo" >> $GITHUB_ENV
        echo "DATE=$(date "+%Y-%m-%d %H:%M:%S")" >> $GITHUB_ENV
        echo "DATE1=$(date "+%Y-%m-%d")" >> $GITHUB_ENV

    steps:
    - name: Checkout master directory
      uses: actions/checkout@v3
      with:
      path: openwrt

    - name: Setup ccache
      uses: Chocobo1/setup-ccache-action@v1

    - name: Initialization packages
      env:
        DEBIAN_FRONTEND: noninteractive
      uses: awalsh128/cache-apt-pkgs-action@latest
      with: 
        packages: build-essential clang flex bison g++ gawk gcc-multilib g++-multilib gettext git libncurses5-dev libssl-dev python3-distutils rsync unzip zlib1g-dev file wget
        version: 1.0

    - name: Initialization environment
      run: |
        sudo rm -rf /etc/apt/sources.list.d/* /usr/share/dotnet /usr/local/lib/android /opt/ghc
        sudo timedatectl set-timezone "$TZ"
        sudo mkdir -p /workdir
        sudo chown $USER:$GROUPS /workdir

    - name: Clone source code
      working-directory: /workdir
      run: |
        df -hT $PWD
        git clone $REPO_URL -b $REPO_BRANCH openwrt
        ln -sf /workdir/openwrt $GITHUB_WORKSPACE/openwrt

    - name: Load custom feeds
      run: |
        [ -e $FEEDS_CONF ] && mv $FEEDS_CONF openwrt/feeds.conf.default
        chmod +x $DIY_P1_SH
        cd openwrt
        $GITHUB_WORKSPACE/$DIY_P1_SH

    - name: add nss firmware
      run: |
        mkdir openwrt/package/firmware/nss-firmware && cd openwrt/package/firmware/nss-firmware
        curl -fsSL https://github.com/robimarko/openwrt/raw/ipq807x-5.15-pr-nss-drv/package/firmware/nss-firmware/Makefile > Makefile

    - name: Add patches
      run: |
        cd openwrt/package/firmware/wireless-regdb/patches
        curl -fsSL https://github.com/1715173329/imoutowrt/raw/master-ax3000-5.15/package/firmware/wireless-regdb/patches/600-custom-change-txpower-and-dfs.patch > 600-custom-change-txpower-and-dfs.patch
        cd $GITHUB_WORKSPACE/openwrt/package/kernel/mac80211/patches/ath11k/
        curl -fsSL https://github.com/1715173329/imoutowrt/raw/master-ax3000-5.15/package/kernel/mac80211/patches/ath11k/983-ath11k-Enable-VHT-for-2G.patch > 983-ath11k-Enable-VHT-for-2G.patch

    - name: luci-theme-argonn
      run: |
        cd openwrt/package
        rm -rf luci-theme-argon
        git clone --depth=1 https://github.com/jerrykuku/luci-theme-argon luci-theme-argon 
        git clone --depth=1 https://github.com/jerrykuku/luci-app-argon-config luci-app-argon-config
        git clone https://github.com/xiaoqingfengATGH/luci-theme-infinityfreedom.git luci-theme-infinityfreedom
        git clone https://github.com/Leo-Jo-My/luci-theme-opentomcat.git luci-theme-opentomcat
        git clone https://github.com/openwrt-develop/luci-theme-atmaterial.git luci-theme-atmaterial
        git clone https://github.com/sirpdboy/luci-theme-opentopd.git luci-theme-opentopd
        #git clone https://github.com/jerrykuku/luci-theme-argon.git luci-theme-argonn

    - name: luci-apps
      run: |
        cd openwrt/package
        git clone https://github.com/coldrook/luci-app-romupdate.git luci-app-romupdate
        git clone https://github.com/rufengsuixing/luci-app-adguardhome.git luci-app-adguardhome 
        git clone https://github.com/garypang13/luci-app-bypass luci-app-bypass

    - name: Update & install feeds
      run: |
        cd openwrt && ./scripts/feeds update -a
        cd openwrt && ./scripts/feeds install -a

    - name: Load custom configuration
      run: |
        [ -e files ] && mv files openwrt/files
        [ -e $CONFIG_FILE ] && mv $CONFIG_FILE openwrt/.config
        chmod +x $DIY_P2_SH
        cd openwrt
        $GITHUB_WORKSPACE/$DIY_P2_SH

    - name: SSH connection to Actions
      uses: P3TERX/ssh2actions@v1.0.0
      if: (github.event.inputs.ssh == 'true' && github.event.inputs.ssh  != 'false') || contains(github.event.action, 'ssh')
      env:
        TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
        TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}

    - name: Download package
      id: package
      if: steps.cache-files.outputs.cache-hit != 'true'
      run: |
        cd openwrt
        make defconfig
        make download -j8
        find dl -size -1024c -exec ls -l {} \;
        find dl -size -1024c -exec rm -f {} \;

    - name: Compile the firmware
      id: compile
      run: |
        cd openwrt
        echo -e "$(nproc) thread compile"
        make -j$(nproc) || make -j1 || make -j1 V=s
        echo "status=success" >> $GITHUB_OUTPUT 
        grep '^CONFIG_TARGET.*DEVICE.*=y' .config | sed -r 's/.*DEVICE_(.*)=y/\1/' > DEVICE_NAME
        [ -s DEVICE_NAME ] && echo "DEVICE_NAME=_$(cat DEVICE_NAME)" >> $GITHUB_ENV
        echo "FILE_DATE=_$(date +"%Y%m%d%H%M")" >> $GITHUB_ENV

    - name: Check space usage
      if: (!cancelled())
      run: df -hT

    - name: Upload bin directory
      uses: actions/upload-artifact@main
      if: steps.compile.outputs.status == 'success' && env.UPLOAD_BIN_DIR == 'true'
      with:
        name: OpenWrt_bin${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}
        path: openwrt/bin

    - name: Organize files
      id: organize
      if: env.UPLOAD_FIRMWARE == 'true' && !cancelled()
      run: |
        cd openwrt/bin/targets/*/*
        rm -rf packages
        echo "FIRMWARE=$PWD" >> $GITHUB_ENV
        echo "status=success" >> $GITHUB_OUTPUT

    - name: Save files
      id: cache-files-save
      uses: actions/cache/save@v3
      with:
        path: |
          openwrt/dl/
          openwrt/staging_dir/host/
          openwrt/staging_dir/hostpkg/
          openwrt/staging_dir/toolchain-aarch64_cortex-a53_gcc-12.2.0_musl
        key: ${{ steps.cache-files.outputs.cache-primary-key }}

    - name: Upload firmware directory
      uses: actions/upload-artifact@main
      if: steps.organize.outputs.status == 'success' && !cancelled()
      with:
        name: OpenWrt_firmware${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}
        path: ${{ env.FIRMWARE }}

    - name: Generate release tag
      id: tag
      if: env.UPLOAD_RELEASE == 'true' && !cancelled()
      run: |
        echo "::set-output name=release_tag::$(date +"%Y.%m.%d-%H%M")"
        touch release.txt
        echo "::set-output name=status::success"

    - name: Upload firmware to release
      uses: softprops/action-gh-release@v1
      if: steps.tag.outputs.status == 'success' && !cancelled()
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.tag.outputs.release_tag }}
        body_path: release.txt
        files: ${{ env.FIRMWARE }}/*

    - name: Delete workflow runs
      uses: GitRML/delete-workflow-runs@main
      with:
        retain_days: 1
        keep_minimum_runs: 3

    - name: Remove old Releases
      uses: dev-drprasad/delete-older-releases@v0.1.0
      if: env.UPLOAD_RELEASE == 'true' && !cancelled()
      with:
        keep_latest: 3
        delete_tags: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
